na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~min(1,Density/3), stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~max(10,Density/3), stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~max(2,Density/3), stroke=FALSE)
map
View(counter)
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~max(1,Density/3), stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~max(0.5,Density/3), stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~min(0.5,Density/3), stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~5, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~Density, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~Density + 5, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="magma", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~Density + 5, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~Density + 5, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.9,
color="white", radius=~Density + 5, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.9,
color="white", radius=~(Density + 5)/3, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.9,
color="white", radius=~(Density/(35/8)+2), stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/8)+2), stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/8))+2, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/8))+5, stroke=FALSE)
map
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/12))+5, stroke=FALSE)
map
# We're going to create a bubble map of the Boston Terrier population in NYC
# Ingredients: dogs
# Hint: Use filter, select, count, merge (twice), and mutate
terriers <- simple_dog %>% filter(
BreedName == "Boston Terrier") %>%
select(ZipCode, Population, Latitude, Longitude)
# We're going to create a bubble map of the Boston Terrier population in NYC
# Ingredients: dogs
# Hint: Use filter, select, count, merge (twice), and mutate
terriers <- simple_dog %>% filter(
BreedName == "Boston Terrier") %>%
select(ZipCode, Latitude, Longitude)
# We're going to create a bubble map of the Boston Terrier population in NYC
# Ingredients: dogs
# Hint: Use filter, select, count, merge (twice), and mutate
terriers <- merged_dog %>% filter(
BreedName == "Boston Terrier")
counter <- terriers %>% count(ZipCode, sort=TRUE)
counter <- merge(counter, zips_data, by="ZipCode")
counter <- merge(counter, lat_long, by="ZipCode")
counter <- counter %>% mutate(Density = 10000 * n/Population) %>% # Calculate a density column representing Boston Terriers per 10000 people in each zip code
select(Density, Latitude, Longitude)
head(counter,5)
# fidos %>% count(ZipCode, sort=TRUE)
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(<DATAFRAME>) %>% # TODO
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>% # TODO
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/12))+5, stroke=FALSE)
map
# We're going to create a bubble map visualizing Boston Terrier population in NYC
# Ingredients: dog_data, zips_data, lat_long
# Hint: Use filter, select, count, merge (twice), and mutate
# For each zip code, we need the latitude, longitude, and terriers per 10000 people (call this column Density for the sake of the exercise)
terriers <- merged_dog %>% filter(
BreedName == "Boston Terrier")
counter <- terriers %>% count(ZipCode, sort=TRUE)
counter <- merge(counter, zips_data, by="ZipCode")
counter <- merge(counter, lat_long, by="ZipCode")
counter <- counter %>% mutate(Density = 10000 * n/Population) %>% # Calculate a density column representing Boston Terriers per 10000 people in each zip code
select(Density, Latitude, Longitude)
head(counter,5)
# fidos %>% count(ZipCode, sort=TRUE)
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>% # TODO
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/12))+5, stroke=FALSE)
map
# We're going to create a bubble map visualizing Boston Terrier population in NYC
# Ingredients: dog_data, zips_data, lat_long
# Hint: Use filter, select, count, merge (twice), and mutate
# For each zip code, we need the latitude, longitude, and terriers per 10000 people (call this column Density for the sake of the exercise)
terriers <- dog_data %>% filter(
BreedName == "Boston Terrier")
counter <- terriers %>% count(ZipCode, sort=TRUE)
counter <- merge(counter, zips_data, by="ZipCode")
counter <- merge(counter, lat_long, by="ZipCode")
counter <- counter %>% mutate(Density = 10000 * n/Population) %>% # Calculate a density column representing Boston Terriers per 10000 people in each zip code
select(Density, Latitude, Longitude)
head(counter,5)
# fidos %>% count(ZipCode, sort=TRUE)
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>% # TODO
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/12))+5, stroke=FALSE)
map
# We're going to create a bubble map visualizing Boston Terrier population in NYC
# Ingredients: dog_data, zips_data, lat_long
# Hint: Use filter, select, count, merge (twice), and mutate
# For each zip code, we need the latitude, longitude, and terriers per 10000 people (call this column Density for the sake of the exercise)
terriers <- dog_data %>% filter(
BreedName == "Boston Terrier")
counter <- terriers %>% count(ZipCode, sort=TRUE)
counter <- merge(counter, zips_data, by="ZipCode")
counter <- merge(counter, lat_long, by="ZipCode")
counter <- counter %>% mutate(Density = 10000 * n/Population) %>% # Calculate a density column representing Boston Terriers per 10000 people in each zip code
select(Density, Latitude, Longitude)
head(counter,5)
# fidos %>% count(ZipCode, sort=TRUE)
mybins <- seq(0, 35, by=(35/9))
mypalette <- colorBin( palette="YlGnBu", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 0.8,
color="white", radius=~Density/3, stroke=FALSE)
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>% # TODO
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/12))+5, stroke=FALSE)
map
# import statements
library(tidyverse)
# Most important one, has a ton of stuff
library(readr) # To read CSV
library(plotly) # Interactive visualizations, python has its own version
library(DT) # to transfer interactive tables to js
library(readxl) # To read excel files
library(wordcloud) # for wordcloud
library(leaflet) # for interactive maps
library(knitr)
dog_data <- read_csv("data/dogs.csv") #import from csv
# note the assignment operator.
dog_data <- dog_data[order(dog_data$AnimalBirthYear, decreasing=TRUE),]
head(dog_data,25)
zips_data <- read_excel("data/zips.xlsx")
#import from excel
head(zips_data,3)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 100)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 200)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 400)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 350)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName)))
+ geom_bar(fill="maroon")
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon")
+   theme(axis.text.x = element_text(angle = 45, hjust=1))
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = ..count..), vjust = -0.1)
plot1
ggplotly(plot1)
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = ..count..), vjust = -0.1)
plot1
ggplotly(plot1)
# TODO: Create a table with the 25 youngest dogs
# TODO: Create a table with the 25 youngest dogs
words <- dog_data %>% select(AnimalName) %>% count(AnimalName, sort=TRUE)
words2 <- words %>% filter(AnimalName != "UNKNOWN" & AnimalName != "NAME NOT PROVIDED" & AnimalName != "NOT")
head(words2, 5)
cloud <- wordcloud(words = words2$AnimalName, freq = words2$n, min.freq = 100,           max.words=200, random.order=FALSE)
cloud
# TODO: Merge dog_da
merged_dog <- merge(simple_dog, lat_long, by="ZipCode")
head(merged_dog,5)
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.1)
plot1
# import statements
library(tidyverse)
# Most important one, has a ton of stuff
library(readr) # To read CSV
library(plotly) # Interactive visualizations, python has its own version
library(DT) # to transfer interactive tables to js
library(readxl) # To read excel files
library(wordcloud) # for wordcloud
library(leaflet) # for interactive maps
library(knitr)
dog_data <- read_csv("data/dogs.csv") #import from csv
# note the assignment operator.
dog_data <- dog_data[order(dog_data$AnimalBirthYear, decreasing=TRUE),]
head(dog_data,25)
zips_data <- read_excel("data/zips.xlsx")
#import from excel
head(zips_data,3)
colnames(zips_data) <- c(
"ZipCode", "Population")
head(zips_data,3)
head_data <- head(dog_data, 350)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.1)
plot1
ggplotly(plot1)
summary(zips_data)
merged_dog <- merge(dog_data, zips_data, by="ZipCode")
head(merged_dog,5)
merged_dog <- merged_dog %>% select('AnimalName', 'AnimalBirthYear', 'AnimalGender', 'BreedName', 'ZipCode', 'Population')
head(merged_dog,5)
fidos <- merged_dog %>% filter(AnimalName == "FIDO") %>% arrange(desc(AnimalBirthYear), desc(BreedName))
head(fidos,5)
fidos <- fidos %>% mutate(age = 2023 - AnimalBirthYear)
head(fidos,5)
merged_dog %>% count(AnimalGender)
words <- dog_data %>% select(AnimalName) %>% count(AnimalName, sort=TRUE)
words2 <- words %>% filter(AnimalName != "UNKNOWN" & AnimalName != "NAME NOT PROVIDED" & AnimalName != "NOT")
head(words2, 5)
cloud <- wordcloud(words = words2$AnimalName, freq = words2$n, min.freq = 100,           max.words=200, random.order=FALSE)
cloud
lat_long <- read_csv("data/lat_long.csv")
head(lat_long,3)
merged_dog <- merge(merged_dog, lat_long, by="ZipCode")
head(merged_dog,5)
# We're going to create a bubble map visualizing Boston Terrier population in NYC
# Ingredients: dog_data, zips_data, lat_long
# Hint: Use filter, select, count, merge (twice), and mutate
# For each zip code, we need the latitude, longitude, and terriers per 10000 people (call this column Density for the sake of the exercise)
terriers <- dog_data %>% filter(
BreedName == "Boston Terrier")
counter <- terriers %>% count(ZipCode, sort=TRUE)
counter <- merge(counter, zips_data, by="ZipCode")
counter <- merge(counter, lat_long, by="ZipCode")
counter <- counter %>% mutate(Density = 10000 * n/Population) %>% # Calculate a density column representing Boston Terriers per 10000 people in each zip code
select(Density, Latitude, Longitude)
head(counter,5)
# fidos %>% count(ZipCode, sort=TRUE)
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>% # TODO
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/12))+5, stroke=FALSE)
map
# import statements
library(tidyverse)
# Most important one, has a ton of stuff
library(readr) # To read CSV
library(plotly) # Interactive visualizations, python has its own version
library(DT) # to transfer interactive tables to js
library(readxl) # To read excel files
library(wordcloud) # for wordcloud
library(leaflet) # for interactive maps
library(knitr)
dog_data <- read_csv("data/dogs.csv") #import from csv
# note the assignment operator.
dog_data <- dog_data[order(dog_data$BreedName, decreasing=TRUE),]
head(dog_data,25)
zips_data <- read_excel("data/zips.xlsx")
#import from excel
head(zips_data,3)
colnames(zips_data) <- c(
"ZipCode", "Population")
head(zips_data,3)
head_data <- head(dog_data, 350)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.1)
plot1
ggplotly(plot1)
summary(zips_data)
merged_dog <- merge(dog_data, zips_data, by="ZipCode")
head(merged_dog,5)
merged_dog <- merged_dog %>% select('AnimalName', 'AnimalBirthYear', 'AnimalGender', 'BreedName', 'ZipCode', 'Population')
head(merged_dog,5)
fidos <- merged_dog %>% filter(AnimalName == "FIDO") %>% arrange(desc(AnimalBirthYear), desc(BreedName))
head(fidos,5)
fidos <- fidos %>% mutate(age = 2023 - AnimalBirthYear)
head(fidos,5)
merged_dog %>% count(AnimalGender)
words <- dog_data %>% select(AnimalName) %>% count(AnimalName, sort=TRUE)
words2 <- words %>% filter(AnimalName != "UNKNOWN" & AnimalName != "NAME NOT PROVIDED" & AnimalName != "NOT")
head(words2, 5)
cloud <- wordcloud(words = words2$AnimalName, freq = words2$n, min.freq = 100,           max.words=200, random.order=FALSE)
cloud
lat_long <- read_csv("data/lat_long.csv")
head(lat_long,3)
merged_dog <- merge(merged_dog, lat_long, by="ZipCode")
head(merged_dog,5)
# We're going to create a bubble map visualizing Boston Terrier population in NYC
# Ingredients: dog_data, zips_data, lat_long
# Hint: Use filter, select, count, merge (twice), and mutate
# For each zip code, we need the latitude, longitude, and terriers per 10000 people (call this column Density for the sake of the exercise)
terriers <- dog_data %>% filter(
BreedName == "Boston Terrier")
counter <- terriers %>% count(ZipCode, sort=TRUE)
counter <- merge(counter, zips_data, by="ZipCode")
counter <- merge(counter, lat_long, by="ZipCode")
counter <- counter %>% mutate(Density = 10000 * n/Population) %>% # Calculate a density column representing Boston Terriers per 10000 people in each zip code
select(Density, Latitude, Longitude)
head(counter,5)
# fidos %>% count(ZipCode, sort=TRUE)
mybins <- seq(0, 36, by=(36/9))
mypalette <- colorBin( palette="YlOrRd", domain=counter$Density,
na.color="transparent", bins=mybins)
map <- leaflet(counter) %>% # TODO
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addCircleMarkers(~Longitude, ~Latitude,
fillColor = ~mypalette(Density), fillOpacity = 1,
color="white", radius=~(Density/(35/12))+5, stroke=FALSE)
map
head_data <- head(dog_data, 5)
plot <- ggplot(data = head_data, aes(x = AnimalName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 10)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
dog_data <- dog_data[order(dog_data$AnimalName, decreasing=TRUE),]
head(dog_data,25)
head_data <- head(dog_data, 10)
plot <- ggplot(data = head_data, aes(x = BreedName)) + geom_bar(fill="darkgreen")
plot
head_data <- head(dog_data, 1000)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.1)
plot1
head_data <- head(dog_data, 200)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.1)
plot1
head_data <- head(dog_data, 100)
plot1 <- ggplot(head_data, aes(fct_infreq(BreedName))) + geom_bar(fill="maroon") +   theme(axis.text.x = element_text(angle = 45, hjust=1)) + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.1)
plot1
ggplotly(plot1)
